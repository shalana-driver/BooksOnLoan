@page "/test"
@* @inject HttpClient Http *@
@inject LibraryDbContext libraryDbContext
@rendermode InteractiveServer


<PageTitle>Books</PageTitle>
<h1>Books</h1>


@if (FilteredBooks == null)
{
    <p><em>Loading...</em></p>
}

else {
    <QuickGrid Items="@FilteredBooks" Pagination="@pagination" style="width: 100%">
        <PropertyColumn Property="@(_ => _.BookId)" Sortable="true" Title="ID"/>
        <PropertyColumn Property="@(_ => _.Author)" Sortable="true" />
        <PropertyColumn Property="@(_ => _.Title)" Sortable="true" />
        <PropertyColumn Property="@(_ => _.Year)" Sortable="true" />
        <PropertyColumn Property="@(_ => _.Quantity)" Sortable="true" />
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="bookFilter" @bind:event="oninput" placeholder="Search Books..." />
            </div>
        </ColumnOptions>
    </QuickGrid> 
    <Paginator State="@pagination" />
}

@code {
    
    private PaginationState pagination = new PaginationState { ItemsPerPage = 12 };
    
    string bookFilter;

    private Microsoft.EntityFrameworkCore.DbSet<Book>? books;
        protected override async Task OnInitializedAsync() {
        books = libraryDbContext.Books;

        }

    private IQueryable<Book> FilteredBooks
    {
        get
        {
            if (string.IsNullOrEmpty(bookFilter))
            {
                return books;
            }
            else
            {
                return books.Where(b => b.Title.Contains(bookFilter, StringComparison.CurrentCultureIgnoreCase));
            }
        }
    }

    @* IQueryable<Book> FilteredBooks {
        get {
            var result = books;
            if (!string.IsNullOrEmpty(bookFilter))
            {
                result = result.Where(b => b.Title.Contains(bookFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    } *@

    

    @* protected override async Task OnInitializedAsync()
    {
        //private readonly LibraryDbContext _context;
        //var libraryDbContext = _context.Transactions;
        //string URL = "DataSource=library.db";
        //IQueryable<Transaction> transactions = await libraryDbContext.ToListAsync();
        //transactions = (await Http.GetFromJsonAsync<Transaction[]>(URL)).AsQueryable();
        //books = libraryDbContext.Books.AsQueryable();
    }  *@
}