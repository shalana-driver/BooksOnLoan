@page "/test"
@* @inject HttpClient Http *@
@inject LibraryDbContext libraryDbContext
@rendermode InteractiveServer

<PageTitle>Transactions</PageTitle>
<h1>Transactions</h1>


@if (FilteredTransactions == null)
{
    <p><em>Loading...</em></p>
}

else {
    <QuickGrid Items="@FilteredTransactions" Pagination="@pagination" style="width: 100%">
        <PropertyColumn Property="@(_ => _.TransactionId)" Sortable="true" Title="ID"/>
        <PropertyColumn Property="@(_ => _.UserName)" Sortable="true" />
        <PropertyColumn Property="@(_ => _.Book.Title)" Sortable="true" />
        <PropertyColumn Property="@(_ => _.LoanDate)" Sortable="true" />
        <PropertyColumn Property="@(_ => _.ReturnDate)" Sortable="true" />
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="transactionFilter" @bind:event="oninput" placeholder="Search Transactions..." />
            </div>
        </ColumnOptions>
    </QuickGrid> 
    <Paginator State="@pagination" />
}

@code {

    private PaginationState pagination = new PaginationState { ItemsPerPage = 12 };
    
    string transactionFilter;

    private IQueryable<Transaction> FilteredTransactions
{
    get
    {
        if (string.IsNullOrEmpty(transactionFilter))
        {
            return transactions;
        }
        else
        {
            return transactions.Where(t => t.Book.Title.Contains(transactionFilter, StringComparison.CurrentCultureIgnoreCase));
        }
    }
}

    @* IQueryable<Book> FilteredBooks {
        get {
            var result = books;
            if (!string.IsNullOrEmpty(bookFilter))
            {
                result = result.Where(b => b.Title.Contains(bookFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    } *@

    private Microsoft.EntityFrameworkCore.DbSet<Transaction>? transactions;
        protected override async Task OnInitializedAsync() {
        transactions = libraryDbContext.Transactions;
        }

    @* protected override async Task OnInitializedAsync()
    {
        //private readonly LibraryDbContext _context;
        //var libraryDbContext = _context.Transactions;
        //string URL = "DataSource=library.db";
        //IQueryable<Transaction> transactions = await libraryDbContext.ToListAsync();
        //transactions = (await Http.GetFromJsonAsync<Transaction[]>(URL)).AsQueryable();
        //books = libraryDbContext.Books.AsQueryable();
    }  *@
}