@* @page "/test" *@
@* @inject HttpClient Http *@
@inject LibraryDbContext libraryDbContext
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore

<PageTitle>Transactions</PageTitle>
<h1>Transactions</h1>


@if (FilteredTransactions == null)
{
    <p><em>Loading...</em></p>
}

else {
    <QuickGrid Items="@FilteredTransactions" Pagination="@pagination" style="width: 100%">
        <PropertyColumn Property="@(_ => _.TransactionId)" Sortable="true" Title="ID"/>
        <PropertyColumn Property="@(_ => _.UserName)" Sortable="true" Title="User Name"/>
        <PropertyColumn Property="@(_ => _.Book.Title)" Sortable="true" />
        <PropertyColumn Property="@(_ => _.LoanDate)" Sortable="true" Title="Loan Date"/>
        <PropertyColumn Property="@(_ => _.DueDate)" Sortable="true" Title="Due Date"/>
        <ColumnOptions>
            <div class="search-box">
                <input class="form-control me-sm-2" style="width: 30%" type="search" autofocus @bind="transactionFilter" @bind:event="oninput" placeholder="Search Transactions..." />
            </div>
        </ColumnOptions>
    </QuickGrid> 
    <Paginator State="@pagination" />
}

@code {

    private PaginationState pagination = new PaginationState { ItemsPerPage = 12 };
    
    string transactionFilter;

    private List<Transaction> transactionList
    {
        get
        {
            var transactions = libraryDbContext.Transactions.Include(t => t.Book).ToList();
            if (!transactions.Any())
            {
                return null;
            }
            else
            {
            
                return transactions;
            }
        }
    }

    private IQueryable<Transaction> FilteredTransactions
    {
        get
        {
            if (string.IsNullOrEmpty(transactionFilter))
            {
                return transactionList.AsQueryable();
            }
            else
            {
                return transactionList.AsQueryable().Include(t => t.Book).Where(t => t.Book.Title.Contains(transactionFilter, StringComparison.CurrentCultureIgnoreCase));
            }
        }
    }
    
}